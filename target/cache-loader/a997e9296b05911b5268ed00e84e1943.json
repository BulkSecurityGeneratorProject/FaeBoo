{"remainingRequest":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/ts-loader/index.js??ref--9-3!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/angular-router-loader/src/index.js!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/tslint-loader/index.js!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/src/main/webapp/app/entities/comment/comment-update.component.ts","dependencies":[{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/src/main/webapp/app/entities/comment/comment-update.component.ts","mtime":1547152357603},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/cache-loader/dist/cjs.js","mtime":1545880467128},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/thread-loader/dist/cjs.js","mtime":1545880466599},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar ng_jhipster_1 = require(\"ng-jhipster\");\nvar comment_service_1 = require(\"./comment.service\");\nvar core_2 = require(\"app/core\");\nvar post_1 = require(\"app/entities/post\");\nvar CommentUpdateComponent = /** @class */ (function () {\n    function CommentUpdateComponent(jhiAlertService, commentService, userService, postService, activatedRoute) {\n        this.jhiAlertService = jhiAlertService;\n        this.commentService = commentService;\n        this.userService = userService;\n        this.postService = postService;\n        this.activatedRoute = activatedRoute;\n    }\n    CommentUpdateComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(function (_a) {\n            var comment = _a.comment;\n            _this.comment = comment;\n        });\n        this.userService.query().subscribe(function (res) {\n            _this.users = res.body;\n        }, function (res) { return _this.onError(res.message); });\n        this.postService.query().subscribe(function (res) {\n            _this.posts = res.body;\n        }, function (res) { return _this.onError(res.message); });\n    };\n    CommentUpdateComponent.prototype.previousState = function () {\n        window.history.back();\n    };\n    CommentUpdateComponent.prototype.save = function () {\n        this.isSaving = true;\n        if (this.comment.id !== undefined) {\n            this.subscribeToSaveResponse(this.commentService.update(this.comment));\n        }\n        else {\n            this.subscribeToSaveResponse(this.commentService.create(this.comment));\n        }\n    };\n    CommentUpdateComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) { return _this.onSaveSuccess(); }, function (res) { return _this.onSaveError(); });\n    };\n    CommentUpdateComponent.prototype.onSaveSuccess = function () {\n        this.isSaving = false;\n        this.previousState();\n    };\n    CommentUpdateComponent.prototype.onSaveError = function () {\n        this.isSaving = false;\n    };\n    CommentUpdateComponent.prototype.onError = function (errorMessage) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    };\n    CommentUpdateComponent.prototype.trackUserById = function (index, item) {\n        return item.id;\n    };\n    CommentUpdateComponent.prototype.trackPostById = function (index, item) {\n        return item.id;\n    };\n    var _a, _b, _c, _d, _e;\n    CommentUpdateComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-comment-update',\n            templateUrl: './comment-update.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _a : Object, typeof (_b = typeof comment_service_1.CommentService !== \"undefined\" && comment_service_1.CommentService) === \"function\" ? _b : Object, typeof (_c = typeof core_2.UserService !== \"undefined\" && core_2.UserService) === \"function\" ? _c : Object, typeof (_d = typeof post_1.PostService !== \"undefined\" && post_1.PostService) === \"function\" ? _d : Object, typeof (_e = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _e : Object])\n    ], CommentUpdateComponent);\n    return CommentUpdateComponent;\n}());\nexports.CommentUpdateComponent = CommentUpdateComponent;\n",{"version":3,"file":"/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/src/main/webapp/app/entities/comment/comment-update.component.ts","sourceRoot":"","sources":["/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/angular-router-loader/src/index.js!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/node_modules/tslint-loader/index.js!/Users/thulasipuppala/Labs/JhipsterGroupProject-Client/src/main/webapp/app/entities/comment/comment-update.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JhiAlertService } from 'ng-jhipster';\n\nimport { IComment } from 'app/shared/model/comment.model';\nimport { CommentService } from './comment.service';\nimport { IUser, UserService } from 'app/core';\nimport { IPost } from 'app/shared/model/post.model';\nimport { PostService } from 'app/entities/post';\n\n@Component({\n    selector: 'jhi-comment-update',\n    templateUrl: './comment-update.component.html'\n})\nexport class CommentUpdateComponent implements OnInit {\n    comment: IComment;\n    isSaving: boolean;\n\n    users: IUser[];\n\n    posts: IPost[];\n\n    constructor(\n        private jhiAlertService: JhiAlertService,\n        private commentService: CommentService,\n        private userService: UserService,\n        private postService: PostService,\n        private activatedRoute: ActivatedRoute\n    ) {}\n\n    ngOnInit() {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({ comment }) => {\n            this.comment = comment;\n        });\n        this.userService.query().subscribe(\n            (res: HttpResponse<IUser[]>) => {\n                this.users = res.body;\n            },\n            (res: HttpErrorResponse) => this.onError(res.message)\n        );\n        this.postService.query().subscribe(\n            (res: HttpResponse<IPost[]>) => {\n                this.posts = res.body;\n            },\n            (res: HttpErrorResponse) => this.onError(res.message)\n        );\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.isSaving = true;\n        if (this.comment.id !== undefined) {\n            this.subscribeToSaveResponse(this.commentService.update(this.comment));\n        } else {\n            this.subscribeToSaveResponse(this.commentService.create(this.comment));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<IComment>>) {\n        result.subscribe((res: HttpResponse<IComment>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    private onSaveSuccess() {\n        this.isSaving = false;\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n    }\n\n    private onError(errorMessage: string) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    }\n\n    trackUserById(index: number, item: IUser) {\n        return item.id;\n    }\n\n    trackPostById(index: number, item: IPost) {\n        return item.id;\n    }\n}\n"]}]}